# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenLidarTools
                                 A QGIS plugin
 Open Lidar Tools for Archaeology
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-10
        copyright            : (C) 2021 by Benjamin Štular, Edisa Lozić, Stefan Eichert
        email                : stefaneichert@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Benjamin Štular, Edisa Lozić, Stefan Eichert'
__date__ = '2021-03-10'
__copyright__ = '(C) 2021 by Benjamin Štular, Edisa Lozić, Stefan Eichert'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import inspect
import os
import pathlib

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)
from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterRasterDestination
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterString
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsExpression
import processing
import processing
from os.path import exists


"""
Model exported as python.
Name : Lidar Pipeline V0.1
Group : XYZ Lidar for Archaeology
With QGIS : 31604
"""

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterString
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsExpression
import processing


class LidarPipelineV01(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterFile('InputFilelaslaz', 'Input File', behavior=QgsProcessingParameterFile.File, fileFilter='Lidar Files (*.las *.laz)', defaultValue=None))
        # Will be created as subfolder where the source .las .laz file is located.
        self.addParameter(QgsProcessingParameterString('Outputfoldername', 'Output folder name', multiLine=False, defaultValue='output'))
        self.addParameter(QgsProcessingParameterBoolean('VERBOSE_LOG', 'Verbose logging', optional=True, defaultValue=False))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(16, model_feedback)
        results = {}
        outputs = {}

        # Create Output directory
        alg_params = {
            'PATH': QgsExpression(' file_path(  @InputFilelaslaz ) + \'/\' + @Outputfoldername + \'/\'').evaluate()
        }
        outputs['CreateOutputDirectory'] = processing.run('native:createdirectory', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # lasground1
        alg_params = {
            'ADDITIONAL_OPTIONS': '',
            'BY_FLIGHTLINE': False,
            'CPU64': False,
            'GRANULARITY': 4,
            'GUI': False,
            'HORIZONTAL_FEET': False,
            'IGNORE_CLASS1': 8,
            'INPUT_LASLAZ': parameters['InputFilelaslaz'],
            'NO_BULGE': False,
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'01_lasground_1.laz\'').evaluate(),
            'TERRAIN': 4,
            'VERBOSE': False,
            'VERTICAL_FEET': False
        }
        outputs['Lasground1'] = processing.run('LAStools:lasground', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # lasheight
        alg_params = {
            'ADDITIONAL_OPTIONS': '-ignore_class 0 1 3 4 5 6 7 8 9 10 11 12',
            'CPU64': False,
            'DROP_ABOVE': False,
            'DROP_ABOVE_HEIGHT': 100,
            'DROP_BELOW': False,
            'DROP_BELOW_HEIGHT': -2,
            'GUI': False,
            'IGNORE_CLASS1': 0,
            'IGNORE_CLASS2': 0,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'01_lasground_1.laz\'').evaluate(),
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'02_lasheight_1.laz\'').evaluate(),
            'REPLACE_Z': False,
            'VERBOSE': True
        }
        outputs['Lasheight'] = processing.run('LAStools:lasheight', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # lasclassify
        alg_params = {
            'ADDITIONAL_OPTIONS': '-small_trees',
            'CPU64': False,
            'GUI': False,
            'HORIZONTAL_FEET': False,
            'IGNORE_CLASS1': 0,
            'IGNORE_CLASS2': 0,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'02_lasheight_1.laz\'').evaluate(),
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'03_lasclassify_1.laz\'').evaluate(),
            'VERBOSE': True,
            'VERTICAL_FEET': False
        }
        outputs['Lasclassify'] = processing.run('LAStools:lasclassify', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # lasground2
        alg_params = {
            'ADDITIONAL_OPTIONS': '-ignore_class 6 7',
            'BY_FLIGHTLINE': False,
            'CPU64': False,
            'GRANULARITY': 4,
            'GUI': False,
            'HORIZONTAL_FEET': False,
            'IGNORE_CLASS1': 0,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'03_lasclassify_1.laz\'').evaluate(),
            'NO_BULGE': False,
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'04_lasground_2.laz\'').evaluate(),
            'TERRAIN': 1,
            'VERBOSE': True,
            'VERTICAL_FEET': False
        }
        outputs['Lasground2'] = processing.run('LAStools:lasground', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # lasheight_classify
        alg_params = {
            'ADDITIONAL_OPTIONS': '',
            'CLASSIFY_ABOVE': 6,
            'CLASSIFY_ABOVE_HEIGHT': 2,
            'CLASSIFY_BELOW': 8,
            'CLASSIFY_BELOW_HEIGHT': -0.25,
            'CLASSIFY_BETWEEN1': 3,
            'CLASSIFY_BETWEEN1_HEIGHT_FROM': -0.2,
            'CLASSIFY_BETWEEN1_HEIGHT_TO': 0.2,
            'CLASSIFY_BETWEEN2': 4,
            'CLASSIFY_BETWEEN2_HEIGHT_FROM': 0.5,
            'CLASSIFY_BETWEEN2_HEIGHT_TO': 2,
            'CPU64': False,
            'GUI': False,
            'IGNORE_CLASS1': 7,
            'IGNORE_CLASS2': 8,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'04_lasground_2.laz\'').evaluate(),
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'REPLACE_Z': False,
            'VERBOSE': True
        }
        outputs['Lasheight_classify'] = processing.run('LAStools:lasheight_classify', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # LidarPointDensity1_Ground
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7,8',
            'input': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'maxz': None,
            'minz': None,
            'output': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'06_LidarPointDensity1_Ground.tif\'').evaluate(),
            'radius': 10,
            'resolution': 2,
            'returns': 0
        }
        outputs['Lidarpointdensity1_ground'] = processing.run('wbt:LidarPointDensity', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'06_LidarPointDensity1_Ground.tif\'').evaluate(),
            'NAME': 'GroundPointDensity'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # LidarPointDensity2_LowVeg
        alg_params = {
            'exclude_cls': '0,1,2,4,5,6,7',
            'input': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'maxz': None,
            'minz': None,
            'output': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'07_LidarPointDensity2_LowVeg.tif\'').evaluate(),
            'radius': 10,
            'resolution': 2,
            'returns': 0
        }
        outputs['Lidarpointdensity2_lowveg'] = processing.run('wbt:LidarPointDensity', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(9)
        if feedback.isCanceled():
            return {}

        # LidarTINGridding
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7',
            'input': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'max_triangle_edge_length': None,
            'maxz': None,
            'minz': None,
            'output': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'08_LidarTINGridding_1.tif\'').evaluate(),
            'parameter': 0,
            'resolution': 0.5,
            'returns': 0
        }
        outputs['Lidartingridding'] = processing.run('wbt:LidarTINGridding', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(10)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'07_LidarPointDensity2_LowVeg.tif\'').evaluate(),
            'NAME': 'LowVegDensity'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(11)
        if feedback.isCanceled():
            return{}

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterFile('InputFilelaslaz', 'Input File', behavior=QgsProcessingParameterFile.File, fileFilter='Lidar Files (*.las *.laz)', defaultValue=None))
        # Will be created as subfolder where the source .las .laz file is located.
        self.addParameter(QgsProcessingParameterString('Outputfoldername', 'Output folder name', multiLine=False, defaultValue='output'))
        self.addParameter(QgsProcessingParameterBoolean('VERBOSE_LOG', 'Verbose logging', optional=True, defaultValue=False))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(16, model_feedback)
        results = {}
        outputs = {}

        # Create Output directory
        alg_params = {
            'PATH': QgsExpression(' file_path(  @InputFilelaslaz ) + \'/\' + @Outputfoldername + \'/\'').evaluate()
        }
        outputs['CreateOutputDirectory'] = processing.run('native:createdirectory', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # lasground1
        alg_params = {
            'ADDITIONAL_OPTIONS': '',
            'BY_FLIGHTLINE': False,
            'CPU64': False,
            'GRANULARITY': 4,
            'GUI': False,
            'HORIZONTAL_FEET': False,
            'IGNORE_CLASS1': 8,
            'INPUT_LASLAZ': parameters['InputFilelaslaz'],
            'NO_BULGE': False,
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'01_lasground_1.laz\'').evaluate(),
            'TERRAIN': 4,
            'VERBOSE': False,
            'VERTICAL_FEET': False
        }
        outputs['Lasground1'] = processing.run('LAStools:lasground', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # lasheight
        alg_params = {
            'ADDITIONAL_OPTIONS': '-ignore_class 0 1 3 4 5 6 7 8 9 10 11 12',
            'CPU64': False,
            'DROP_ABOVE': False,
            'DROP_ABOVE_HEIGHT': 100,
            'DROP_BELOW': False,
            'DROP_BELOW_HEIGHT': -2,
            'GUI': False,
            'IGNORE_CLASS1': 0,
            'IGNORE_CLASS2': 0,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'01_lasground_1.laz\'').evaluate(),
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'02_lasheight_1.laz\'').evaluate(),
            'REPLACE_Z': False,
            'VERBOSE': True
        }
        outputs['Lasheight'] = processing.run('LAStools:lasheight', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # lasclassify
        alg_params = {
            'ADDITIONAL_OPTIONS': '-small_trees',
            'CPU64': False,
            'GUI': False,
            'HORIZONTAL_FEET': False,
            'IGNORE_CLASS1': 0,
            'IGNORE_CLASS2': 0,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'02_lasheight_1.laz\'').evaluate(),
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'03_lasclassify_1.laz\'').evaluate(),
            'VERBOSE': True,
            'VERTICAL_FEET': False
        }
        outputs['Lasclassify'] = processing.run('LAStools:lasclassify', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # lasground2
        alg_params = {
            'ADDITIONAL_OPTIONS': '-ignore_class 6 7',
            'BY_FLIGHTLINE': False,
            'CPU64': False,
            'GRANULARITY': 4,
            'GUI': False,
            'HORIZONTAL_FEET': False,
            'IGNORE_CLASS1': 0,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'03_lasclassify_1.laz\'').evaluate(),
            'NO_BULGE': False,
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'04_lasground_2.laz\'').evaluate(),
            'TERRAIN': 1,
            'VERBOSE': True,
            'VERTICAL_FEET': False
        }
        outputs['Lasground2'] = processing.run('LAStools:lasground', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # lasheight_classify
        alg_params = {
            'ADDITIONAL_OPTIONS': '',
            'CLASSIFY_ABOVE': 6,
            'CLASSIFY_ABOVE_HEIGHT': 2,
            'CLASSIFY_BELOW': 8,
            'CLASSIFY_BELOW_HEIGHT': -0.25,
            'CLASSIFY_BETWEEN1': 3,
            'CLASSIFY_BETWEEN1_HEIGHT_FROM': -0.2,
            'CLASSIFY_BETWEEN1_HEIGHT_TO': 0.2,
            'CLASSIFY_BETWEEN2': 4,
            'CLASSIFY_BETWEEN2_HEIGHT_FROM': 0.5,
            'CLASSIFY_BETWEEN2_HEIGHT_TO': 2,
            'CPU64': False,
            'GUI': False,
            'IGNORE_CLASS1': 7,
            'IGNORE_CLASS2': 8,
            'INPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'04_lasground_2.laz\'').evaluate(),
            'OUTPUT_LASLAZ': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'REPLACE_Z': False,
            'VERBOSE': True
        }
        outputs['Lasheight_classify'] = processing.run('LAStools:lasheight_classify', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # LidarPointDensity1_Ground
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7,8',
            'input': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'maxz': None,
            'minz': None,
            'output': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'06_LidarPointDensity1_Ground.tif\'').evaluate(),
            'radius': 10,
            'resolution': 2,
            'returns': 0
        }
        outputs['Lidarpointdensity1_ground'] = processing.run('wbt:LidarPointDensity', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'06_LidarPointDensity1_Ground.tif\'').evaluate(),
            'NAME': 'GroundPointDensity'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # LidarPointDensity2_LowVeg
        alg_params = {
            'exclude_cls': '0,1,2,4,5,6,7',
            'input': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'maxz': None,
            'minz': None,
            'output': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'07_LidarPointDensity2_LowVeg.tif\'').evaluate(),
            'radius': 10,
            'resolution': 2,
            'returns': 0
        }
        outputs['Lidarpointdensity2_lowveg'] = processing.run('wbt:LidarPointDensity', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(9)
        if feedback.isCanceled():
            return {}

        # LidarTINGridding
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7',
            'input': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'05_lasheightclassify_1.las\'').evaluate(),
            'max_triangle_edge_length': None,
            'maxz': None,
            'minz': None,
            'output': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'08_LidarTINGridding_1.tif\'').evaluate(),
            'parameter': 0,
            'resolution': 0.5,
            'returns': 0
        }
        outputs['Lidartingridding'] = processing.run('wbt:LidarTINGridding', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(10)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'07_LidarPointDensity2_LowVeg.tif\'').evaluate(),
            'NAME': 'LowVegDensity'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(11)
        if feedback.isCanceled():
            return{}
        alg_params = {
            'FILL_NO_DATA': True,
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'08_LidarTINGridding_1.tif\'').evaluate(),
            'KEEP_ORIG_NO_DATA': False,
            'NOISE_REMOVE': 0,
            'NUM_DIRECTIONS': 16,
            'OUTPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'09_RVTSkyview factor.tif\'').evaluate(),
            'RADIUS': 10,
            'SAVE_AS_8BIT': False,
            'VE_FACTOR': 1,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RvtSkyviewFactor'] = processing.run('rvt:rvt_svf', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'08_LidarTINGridding_1.tif\'').evaluate(),
            'NAME': 'DFM'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(13)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'09_RVTSkyview factor.tif\'').evaluate(),
            'NAME': 'SVF'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # RVT Blender
        alg_params = {
            'BLEND_COMBINATION': 0,
            'FILL_NO_DATA': True,
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'08_LidarTINGridding_1.tif\'').evaluate(),
            'KEEP_ORIG_NO_DATA': False,
            'OUTPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'10_RVT_Blender_1.tif\'').evaluate(),
            'SAVE_AS_8BIT': True,
            'TERRAIN_TYPE': 0,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['RvtBlender'] = processing.run('rvt:rvt_blender', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(15)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        alg_params = {
            'INPUT': QgsExpression('file_path(  @InputFilelaslaz ) + \'/\' +@Outputfoldername  + \'/\'  + base_file_name(  @InputFilelaslaz ) + \'10_RVT_Blender_1.tif\'').evaluate(),
            'NAME': 'RVT_Blender'
        }
        outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return results

    def createInstance(self):
        return LidarPipelineV01()

    def name(self):
        return 'Lidar preparation pipeline'

    def displayName(self):
        return 'Lidar preparation pipeline'

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Analysis'

    def shortHelpString(self):
        return """<html><body><h2>Algorithm description</h2>
    <p>Calculates Confidence map for 0.5 m DFM.

    Digital Feature Model (DFM) is archaeology- specific DEM interpolated from airborne LiDAR data. This algorithm calculates DFM Confidence Map based on the CRAN decision tree. The confidence map is primarily used for the quality assessment of the DFM, but can also be used to determine the optimal resolution for the DFM.
    This algorithm can also be used to calculate the prediction uncertainty map for any DEM, but the settings must be adjusted for cell size.
    For more information, see Štular, Lozić, Eichert 2021 (in press).</p>
    <h2>Input parameters</h2>
    <h3>DEM/DFM Layer</h3>
    <p>DFM (or any DEM) with cell size 0.5m in raster format</p>
    <h3>Low Vegetation Density Layer</h3>
    <p>Point density layer of low vegetation (ASPRS standard LIDAR point class 3, height 0.5-2.0 m) in raster format. Recommended cell size is 0.5 or 1.0 m. (Whitebox Tools / LidarPointDensity can be used to calculate this layer from a LAS file).</p>
    <h3>Ground Point Density Layer</h3>
    <p>Point density layer of ground (ASPRS class 2) and building (ASPRS class 6) points in raster format. Recommended cell size is 0.5 or 1.0 m. (Whitebox Tools / LidarPointDensity can be used to calculate this layer from a LAS file).</p>
    <h3>Cell Size:</h3>
    <p>Define the cell size of the Confidence Map. 0.5 or 1 m is recommended.</p>

    <p></p>
    <br><p align="right">Algorithm author: Benjamin Štular, Edisa Lozić, Stefan Eichert </p><p align="right">Help author: Benjamin Štular, Edisa Lozić, Stefan Eichert</p></body></html>"""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return LidarPipelineV01()
