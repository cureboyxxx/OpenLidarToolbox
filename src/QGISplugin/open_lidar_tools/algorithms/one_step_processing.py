# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenLidarTools
                                 A QGIS QGISplugin
 Open LiDAR Toolbox
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-10
        copyright            : (C) 2021 by Benjamin Štular, Edisa Lozić, Stefan Eichert
        email                : stefaneichert@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Benjamin Štular, Edisa Lozić, Stefan Eichert'
__date__ = '2021-03-10'
__copyright__ = '(C) 2021 by Benjamin Štular, Edisa Lozić, Stefan Eichert'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

"""
Model exported as python.
Name : Lidar Pipeline
Group : OpenLidarToolbox
With QGIS : 31604
"""

import inspect
import os
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import QgsProcessingUtils
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterFileDestination
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterCrs
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsProcessingParameterString
import processing

class LidarPipeline(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):

        self.addParameter(
            QgsProcessingParameterFile('InputFilelaslaz', 'Input File', behavior=QgsProcessingParameterFile.File,
                                       fileFilter='Lidar Files (*.las *.laz)', defaultValue=None))
        self.addParameter(QgsProcessingParameterBoolean('classLas', 'The input LAS/LAZ file is already classified', optional=False, defaultValue=False))
        self.addParameter(QgsProcessingParameterCrs('CRS', 'Source File Coordinate System', defaultValue=None))
        self.addParameter(
            QgsProcessingParameterFileDestination('LAS', 'Classified LAZ', fileFilter='Lidar Files (*.laz *.las)',
                                                  defaultValue=None, optional=False, createByDefault=False))
        self.addParameter(
            QgsProcessingParameterNumber('SetCellSize', 'Cell Size', type=QgsProcessingParameterNumber.Double,
                                         minValue=0, maxValue=1.79769e+308, defaultValue=0.5))
        self.addParameter(QgsProcessingParameterString('prefix', 'Name prefix for layers', multiLine=False,
                                                       defaultValue='', optional=True))
        self.addParameter(QgsProcessingParameterBoolean('VisualisationDFM', 'DFM', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('GPD', 'Ground Point Density', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('LVD', 'Low Vegetation Density', optional=False, defaultValue=True))
        self.addParameter(
            QgsProcessingParameterBoolean('VisualisationCM', 'DFM CM 0.5m', optional=False, defaultValue=True))
        self.addParameter(
            QgsProcessingParameterBoolean('VisualisationVAT', 'Visualisation VAT', optional=False, defaultValue=True))
        self.addParameter(
            QgsProcessingParameterBoolean('VisualisationSVF', 'Visualisation SVF', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('VisualisationOPN', 'Visualisation Openness', optional=False,
                                                        defaultValue=True))
        self.addParameter(
            QgsProcessingParameterBoolean('VisualisationDfME', 'Visualisation DME', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('VisualisationHS', 'Visualisation Hillshade', optional=False,
                                                        defaultValue=True))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(9, model_feedback)
        results = {}
        outputs = {}

        iter = 1
        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}

        if not parameters['classLas']:

            alg_params = {
                'InputFilelaslaz': parameters['InputFilelaslaz'],
                'LAS': QgsProcessingUtils.generateTempFilename('lasheightCl.las')
            }
            outputs['ClassifyLaslaz'] = processing.run('Open LiDAR Toolbox:ToClassLas', alg_params, context=context,
                                                       feedback=feedback, is_child_algorithm=True)
            lasheightclassifyfile = outputs['ClassifyLaslaz']['classifiedLAZ']
            results['LAS'] = outputs['ClassifyLaslaz']['classifiedLAZ']

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        if parameters['classLas']:
            lasheightclassifyfile = parameters['InputFilelaslaz']

        if parameters['LAS'] != 'TEMPORARY_OUTPUT':
            # laszip
            alg_params = {
                'ADDITIONAL_OPTIONS': '',
                'APPEND_LAX': False,
                'CPU64': False,
                'CREATE_LAX': False,
                'GUI': False,
                'INPUT_LASLAZ': lasheightclassifyfile,
                'REPORT_SIZE': False,
                'VERBOSE': False,
                'OUTPUT_LASLAZ': parameters['LAS']
            }
            outputs['Laszip'] = processing.run('LAStools:laszip', alg_params, context=context, feedback=feedback,
                                               is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        # Create base data
        alg_params = {
            'CRS': parameters['CRS'],
            'GPD': parameters['GPD'],
            'IDW': True,
            'InputFilelaslaz': lasheightclassifyfile,
            'LVD': parameters['LVD'],
            'SetCellSize': parameters['SetCellSize'],
            'TIN': True,
            'prefix': parameters['prefix']
        }
        outputs['CreateBaseData'] = processing.run('Open LiDAR Toolbox:basedata', alg_params, context=context,
                                                   feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        # DFM Confidence Map
        alg_params = {
            'CRS': parameters['CRS'],
            'Createconfidencemapfor': [1],
            'DEMDFM': outputs['CreateBaseData']['DEM'],
            'Groundlayer': outputs['CreateBaseData']['GPD'],
            'LowVegetation': outputs['CreateBaseData']['LVD'],
            'SetCellSize': parameters['SetCellSize'],
            'loadCFM': False
        }
        outputs['DfmConfidenceMap'] = processing.run('Open LiDAR Toolbox:DFM confidence map', alg_params,
                                                     context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1


        if parameters['VisualisationCM']:
            # Load result
            alg_params = {
                'INPUT': outputs['DfmConfidenceMap']['CFM 0.5m'],
                'NAME': parameters['prefix'] + 'DFM confidence map 0,5m'
            }
            outputs['LoadResult'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback,
                                                   is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        # Hybrid Interpolation
        alg_params = {
            'CRS': parameters['CRS'],
            'CellSize': parameters['SetCellSize'],
            'ConfidenceMapRaster': outputs['DfmConfidenceMap']['CFM 0.5m'],
            'IDW': outputs['CreateBaseData']['IDW'],
            'REDgrowradiusinrastercells': 3,
            'TLI': outputs['CreateBaseData']['DEM'],
            'loadDFM': False
        }
        outputs['HybridInterpolation'] = processing.run('Open LiDAR Toolbox:Hybrid interpolation', alg_params,
                                                        context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        if parameters['VisualisationDFM']:
            # Load result
            alg_params = {
                'INPUT': outputs['HybridInterpolation']['Dfm'],
                'NAME': parameters['prefix'] + 'DFM'
            }
            outputs['LoadResult'] = processing.run('native:loadlayer', alg_params, context=context, feedback=feedback,
                                                   is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        # Visualisations (from DFM)
        alg_params = {
            'DFMDEM': outputs['HybridInterpolation']['Dfm'],
            'VisualisationDfME': parameters['VisualisationDfME'],
            'VisualisationHS': parameters['VisualisationHS'],
            'VisualisationOPN': parameters['VisualisationOPN'],
            'VisualisationSVF': parameters['VisualisationSVF'],
            'VisualisationVAT': parameters['VisualisationVAT'],
            'prefix': parameters['prefix']
        }
        outputs['VisualisationsFromDfm'] = processing.run('Open LiDAR Toolbox:Visualise', alg_params,
                                                          context=context, feedback=feedback,
                                                          is_child_algorithm=True)

        feedback.setCurrentStep(iter)
        if feedback.isCanceled():
            return {}
        iter = iter + 1

        return results

    def name(self):
        return 'ONE'

    def displayName(self):
        return '0NE (One-Step-Processing)'

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, '1_1_One(red).png')))
        return icon

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        return """<html><body><h2>Algorithm description</h2>
    <p>This is an algorithm pipeline that takes an unclassified airborne LiDAR point cloud to produce all derivatives essential for archaeology and anyone interested in visual analysis of LiDAR data.</p>
    <h2>Input parameters</h2>
    <h3>Input File</h3>
    <p>Point cloud in LAS or LAZ format. Noise classified as ASPRS class 7 will be exempt from the processing, all other preexisting classification will be ignored.
    <b>Point clouds with more than 30 million points will fail or will take very long to process.</b></p>
    <h3>The input LAS/LAZ file is already classified</h3>
    <p>Please tick this box, if your file (LAS/LAZ format) is already classified. If it is not, or you are not sure, leave it blank.</p>
    <h3>Source File Coordinate System</h3>
    <p>Select the Coordinate Reference System (CRS) of the input LAS/LAZ file. Make sure that the CRS is Cartesian (x and y in meters, not degrees). If you are not sure which the is correct CRS and you only need it temporarily you can choose any Cartesian CRS, for example, EPSG:8687.</p>
    <h3>Cell Size</h3>
    <p>DFM grid resolution, default value is 0.5 m. Optimal resolution for any given point cloud can be calculated with the DFM Confidence Map tool.</p>
    <h3>Name prefix for layers</h3>
    <p>The output layers are added to the map as temporary layers with default names. They can be saved as files afterwards. In order to distinguish them from previously created files with the same tool a prefix should be defined to avoid the same names for different layers</p>
    <p><b>Classified LAZ: </b> Classified point cloud. QGIS cannot load point clouds so it must be saved as a LAZ file. Specify folder and file name.</p>
    <h3>Outputs:</h3>
    <p><b>DFM: </b> Digital feature model, which is a type of DEM that combines ground and buildings</p>
    <p><b>Ground Point Density</b></p>
    <p><b>Low Vegetation Density</b></p>
    <p><b>DFM CM 0.5m: </b> DFM Confidence Map for 0.5 m resolution (if other resolutions are needed – e.g., the map is either completely red or completely blue – use the dedicated tool)</p>
    <p><b>Classified LAZ: </b> Classified point cloud. This can saved to a ".laz" file which is not added to the map.</p>
    <p><b>Visualisations:</b></p>
    <p><b>VAT: </b> Visualisation for archaeological topography</p>
    <p><b>SVF: </b> Sky view factor</p>
    <p><b>Opennes: </b> Openness – positive</p>
    <p><b>DME: </b> Difference from mean elevation</p>
    <p><b>Hillshade: </b> Hillshade/Relief of DFM</p>
    <h2>FAQ</h2>
    <h3>The edges of my outputs are black</h3>
    <p>This is due to the so called edge effect. In many steps the values are calculated from surrounding points; since at the edge there are no surrounding points, the output values are "strange", e.g., showing as black on most visualisations. This cannot be avoided and the only solution is to process larger areas or to create overlapping mosaics.</p>
    <p></p>
    <br><br>
    <p><b>Literature:</b> Štular, Lozić, Eichert 2021 (in press).</p>
    <br><a href="https://github.com/stefaneichert/OpenLidarTools">Website</a>
    <br><p align="right">Algorithm author: Benjamin Štular, Edisa Lozić, Stefan Eichert </p><p align="right">Help author: Benjamin Štular, Edisa Lozić, Stefan Eichert</p></body></html>"""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return LidarPipeline()
