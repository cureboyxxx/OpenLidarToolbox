# -*- coding: utf-8 -*-

"""
/***************************************************************************
 OpenLidarTools
                                 A QGIS QGISplugin
 Open LiDAR Toolbox
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-10
        copyright            : (C) 2021 by Benjamin Štular, Edisa Lozić, Stefan Eichert
        email                : stefaneichert@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Benjamin Štular, Edisa Lozić, Stefan Eichert'
__date__ = '2021-03-10'
__copyright__ = '(C) 2021 by Benjamin Štular, Edisa Lozić, Stefan Eichert'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

"""
Model exported as python.
Name : Lidar Pipeline
Group : OpenLidarToolbox
With QGIS : 31604
"""

import inspect
import os
import pathlib
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import QgsProcessing
from qgis.core import QgsProcessingUtils
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterFile
from qgis.core import QgsProcessingParameterFileDestination
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterCrs
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsProcessingParameterString
from qgis.core import QgsProcessingParameterDefinition
import processing
from os.path import exists


class BaseData(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):

        self.addParameter(
            QgsProcessingParameterFile('InputFilelaslaz', 'Classified LAS/LAZ file', behavior=QgsProcessingParameterFile.File,
                                       fileFilter='Lidar Files (*.las *.laz)', defaultValue=None))
        self.addParameter(QgsProcessingParameterCrs('CRS', 'Source File Coordinate System', defaultValue=None))
        self.addParameter(
            QgsProcessingParameterNumber('SetCellSize', 'Cell Size', type=QgsProcessingParameterNumber.Double,
                                         minValue=0, maxValue=1.79769e+308, defaultValue=0.5))
        self.addParameter(QgsProcessingParameterString('prefix', 'Name prefix for layers', multiLine=False,
                                                       defaultValue='ONE ', optional=False))
        self.addParameter(QgsProcessingParameterBoolean('TIN', 'TIN', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('IDW', 'IDW', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('GPD', 'Ground Point Density', optional=False, defaultValue=True))
        self.addParameter(QgsProcessingParameterBoolean('LVD', 'Low Vegetation Density', optional=False, defaultValue=True))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(54, model_feedback)
        results = {}
        outputs = {}

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}
        lasheightclassifyfile = parameters['InputFilelaslaz']

        if parameters['InputFilelaslaz'][-4:] == '.laz':

            # laszip
            alg_params = {
                'ADDITIONAL_OPTIONS': '',
                'APPEND_LAX': False,
                'CPU64': False,
                'CREATE_LAX': False,
                'GUI': False,
                'INPUT_LASLAZ': parameters['InputFilelaslaz'],
                'OUTPUT_LASLAZ': QgsProcessingUtils.generateTempFilename('lasheight.las'),
                'REPORT_SIZE': False,
                'VERBOSE': False
            }
            lasheightclassifyfile = alg_params['OUTPUT_LASLAZ']
            outputs['Laszip'] = processing.run('LAStools:laszip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # LidarPointDensity1_Ground
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7,8',
            'input': lasheightclassifyfile,
            'maxz': None,
            'minz': None,
            'radius': 10,
            'resolution': 2,
            'returns': 0,
            'output': QgsProcessingUtils.generateTempFilename('gpd.tif')
        }
        GroundPointDensityfile = alg_params['output']
        outputs['Lidarpointdensity1_ground'] = processing.run('wbt:LidarPointDensity', alg_params, context=context,
                                                              feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # resampleGPD
        alg_params = {
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': parameters['SetCellSize'],
            'GRASS_REGION_PARAMETER': GroundPointDensityfile,
            'input': GroundPointDensityfile,
            'output': QgsProcessingUtils.generateTempFilename('GPDres.tif')
        }
        GPDfileR = alg_params['output']
        outputs['Resamplegpd'] = processing.run('grass7:r.resample', alg_params, context=context, feedback=feedback,
                                                is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Warp (reproject)
        alg_params = {
            'DATA_TYPE': 0,
            'EXTRA': '',
            'INPUT': GPDfileR,
            'MULTITHREADING': False,
            'NODATA': None,
            'OPTIONS': '',
            'RESAMPLING': 0,
            'SOURCE_CRS': parameters['CRS'],
            'TARGET_CRS': parameters['CRS'],
            'TARGET_EXTENT': None,
            'TARGET_EXTENT_CRS': None,
            'TARGET_RESOLUTION': None,
            'OUTPUT': QgsProcessingUtils.generateTempFilename('GPDres.tif')
        }

        outputs['WarpReproject'] = processing.run('gdal:warpreproject', alg_params, context=context,
                                                  feedback=feedback,
                                                  is_child_algorithm=True)
        GPDfileR = alg_params['OUTPUT']
        results['GPD'] = GPDfileR

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        if parameters['GPD']:
            alg_params = {
                'INPUT': GPDfileR,
                'NAME': parameters['prefix'] + 'Ground Point Density'
            }
            outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context,
                                                             feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # LidarPointDensity2_LowVeg
        alg_params = {
            'exclude_cls': '0,1,2,4,5,6,7',
            'input': lasheightclassifyfile,
            'maxz': None,
            'minz': None,
            'radius': 10,
            'resolution': 2,
            'returns': 0,
            'output': QgsProcessingUtils.generateTempFilename('lvd.tif')
        }
        LowVegfile = alg_params['output']
        outputs['Lidarpointdensity2_lowveg'] = processing.run('wbt:LidarPointDensity', alg_params, context=context,
                                                              feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # resampleLVD
        alg_params = {
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': parameters['SetCellSize'],
            'GRASS_REGION_PARAMETER': GroundPointDensityfile,
            'input': LowVegfile,
            'output': QgsProcessingUtils.generateTempFilename('LVD.tif')
        }
        LVDfileR = alg_params['output']
        outputs['Resamplelvd'] = processing.run('grass7:r.resample', alg_params, context=context, feedback=feedback,
                                                is_child_algorithm=True)

        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Warp (reproject)
        alg_params = {
            'DATA_TYPE': 0,
            'EXTRA': '',
            'INPUT': LVDfileR,
            'MULTITHREADING': False,
            'NODATA': None,
            'OPTIONS': '',
            'RESAMPLING': 0,
            'SOURCE_CRS': parameters['CRS'],
            'TARGET_CRS': parameters['CRS'],
            'TARGET_EXTENT': None,
            'TARGET_EXTENT_CRS': None,
            'TARGET_RESOLUTION': None,
            'OUTPUT': QgsProcessingUtils.generateTempFilename('LVD.tif')
        }

        outputs['WarpReproject'] = processing.run('gdal:warpreproject', alg_params, context=context,
                                                  feedback=feedback,
                                                  is_child_algorithm=True)
        LVDfileR = alg_params['OUTPUT']
        results['LVD'] = LVDfileR
        feedback.setCurrentStep(13)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        if parameters['LVD']:
            alg_params = {
                'INPUT': LVDfileR,
                'NAME': parameters['prefix'] + 'Low Vegetation Density'
            }
            outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context,
                                                             feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # LidarTINGridding
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7',
            'input': lasheightclassifyfile,
            'max_triangle_edge_length': None,
            'maxz': None,
            'minz': None,
            'parameter': 0,
            'resolution': 0.5,
            'returns': 0,
            'output': QgsProcessingUtils.generateTempFilename('tin.tif')
        }
        tingrid = alg_params['output']
        outputs['Lidartingridding'] = processing.run('wbt:LidarTINGridding', alg_params, context=context,
                                                     feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(15)
        if feedback.isCanceled():
            return {}

        # resampleTIN
        alg_params = {
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': parameters['SetCellSize'],
            'GRASS_REGION_PARAMETER': GroundPointDensityfile,
            'input': tingrid,
            'output': QgsProcessingUtils.generateTempFilename('tinRes.tif')
        }
        TINfileR = alg_params['output']
        outputs['ResampleTin'] = processing.run('grass7:r.resample', alg_params, context=context, feedback=feedback,
                                                is_child_algorithm=True)

        feedback.setCurrentStep(16)
        if feedback.isCanceled():
            return {}

        # Warp (reproject)
        alg_params = {
            'DATA_TYPE': 0,
            'EXTRA': '',
            'INPUT': TINfileR,
            'MULTITHREADING': False,
            'NODATA': None,
            'OPTIONS': '',
            'RESAMPLING': 0,
            'SOURCE_CRS': parameters['CRS'],
            'TARGET_CRS': parameters['CRS'],
            'TARGET_EXTENT': None,
            'TARGET_EXTENT_CRS': None,
            'TARGET_RESOLUTION': None,
            'OUTPUT': QgsProcessingUtils.generateTempFilename('TINfileR.tif')
        }

        outputs['WarpReproject'] = processing.run('gdal:warpreproject', alg_params, context=context, feedback=feedback,
                                                  is_child_algorithm=True)
        TINfileR = alg_params['OUTPUT']
        results['DEM'] = TINfileR

        feedback.setCurrentStep(17)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        if parameters['TIN']:
            alg_params = {
                'INPUT': TINfileR,
                'NAME': parameters['prefix'] + 'TIN'
            }
            outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context,
                                                             feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # LidarIdwInterpolation
        alg_params = {
            'exclude_cls': '0,1,3,4,5,7,8,9',
            'input': lasheightclassifyfile,
            'maxz': None,
            'minz': None,
            'parameter': 0,
            'radius': 5,
            'resolution': 0.5,
            'returns': 0,
            'weight': 2,
            'output': QgsProcessingUtils.generateTempFilename('idw.tif')
        }
        lidarIDW = alg_params['output']
        outputs['Lidaridwinterpolation'] = processing.run('wbt:LidarIdwInterpolation', alg_params, context=context,
                                                          feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(18)
        if feedback.isCanceled():
            return {}

        # resampleIDW
        alg_params = {
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': parameters['SetCellSize'],
            'GRASS_REGION_PARAMETER': GroundPointDensityfile,
            'input': lidarIDW,
            'output': QgsProcessingUtils.generateTempFilename('IDWres.tif')
        }
        IDWfileR = alg_params['output']
        outputs['ResampleIDW'] = processing.run('grass7:r.resample', alg_params, context=context, feedback=feedback,
                                                is_child_algorithm=True)

        feedback.setCurrentStep(19)
        if feedback.isCanceled():
            return {}

        # Warp (reproject)
        alg_params = {
            'DATA_TYPE': 0,
            'EXTRA': '',
            'INPUT': IDWfileR,
            'MULTITHREADING': False,
            'NODATA': None,
            'OPTIONS': '',
            'RESAMPLING': 0,
            'SOURCE_CRS': parameters['CRS'],
            'TARGET_CRS': parameters['CRS'],
            'TARGET_EXTENT': None,
            'TARGET_EXTENT_CRS': None,
            'TARGET_RESOLUTION': None,
            'OUTPUT': QgsProcessingUtils.generateTempFilename('IDWres.tif')
        }

        outputs['WarpReproject'] = processing.run('gdal:warpreproject', alg_params, context=context, feedback=feedback,
                                                  is_child_algorithm=True)
        IDWfileR = alg_params['OUTPUT']
        results['IDW'] = IDWfileR

        feedback.setCurrentStep(20)
        if feedback.isCanceled():
            return {}

        # Load layer into project
        if parameters['IDW']:
            alg_params = {
                'INPUT': IDWfileR,
                'NAME': parameters['prefix'] + 'IDW'
            }
            outputs['LoadLayerIntoProject'] = processing.run('native:loadlayer', alg_params, context=context,
                                                             feedback=feedback, is_child_algorithm=True)

        return results

    def name(self):
        return 'basedata'

    def displayName(self):
        return 'Create base data'

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, '3_1_All_Derivatives.png')))
        return icon

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        return """<html><body><h2>Algorithm description</h2>
    <p>This is an algorithm pipeline that takes a classified airborne LiDAR point cloud to produce all derivatives essential for archaeology and anyone interested in visual analysis of LiDAR data.</p>
    <h2>Input parameters</h2>
    <h3>Input File</h3>
    <p>Classified point cloud</p>
    <h3>Outputs:</h3>
    <p><b>DFM: </b> Digital feature model, which is a type of DEM that combines ground and buildings</p>
    <p><b>Ground Point Density</b></p>
    <p><b>Low Vegetation Density</b></p>
    <p><b>DFM CM 0.5m: </b> DFM Confidence Map for 0.5 m resolution (if other resolutions are needed – e.g., the map is either completely red or completely blue – use the dedicated tool)</p>
    <p><b>Classified LAZ: </b> Classified point cloud. This can saved to a ".laz" file which is not added to the map.</p>
    <p><b>Visualisations:</b></p>
    <p><b>VAT: </b> Visualisation for archaeological topography</p>
    <p><b>SVF: </b> Sky view factor</p>
    <p><b>Opennes: </b> Openness – positive</p>
    <p><b>DME: </b> Difference from mean elevation</p>
    <p><b>Hillshade: </b> Hillshade/Relief of DFM</p>
    <h2>FAQ</h2>
    <h3>The edges of my outputs are black</h3>
    <p>This is due to the so called edge effect. In many steps the values are calculated from surrounding points; since at the edge there are no surrounding points, the output values are "strange", e.g., showing as black on most visualisations. This cannot be avoided and the only solution is to process larger areas or to create overlapping mosaics.</p>
    <p></p>
    <br><br>
    <p><b>Literature:</b> Štular, Lozić, Eichert 2021 (in press).</p>
    <br><a href="https://github.com/stefaneichert/OpenLidarTools">Website</a>
    <br><p align="right">Algorithm author: Benjamin Štular, Edisa Lozić, Stefan Eichert </p><p align="right">Help author: Benjamin Štular, Edisa Lozić, Stefan Eichert</p></body></html>"""

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return BaseData()
